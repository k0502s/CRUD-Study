{"version":3,"sources":["http-common.js","services/TutorialService.js","components/AddTutorial.js","components/Tutorial.js","components/TutorialsList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddTutorial","props","initialTutorialState","description","published","useState","tutorial","setTutorial","submitted","setSubmitted","handleInputChange","event","target","name","value","className","onClick","history","push","htmlFor","type","required","onChange","TutorialDataService","then","response","console","log","catch","e","Tutorial","currentTutorial","setCurrentTutorial","message","setMessage","useEffect","match","params","updatePublished","status","TutorialsList","tutorials","setTutorials","currentIndex","setCurrentIndex","searchTitle","setSearchTitle","retrieveTutorials","placeholder","map","index","setActiveTutorial","key","to","App","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.38967c85.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:8080/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\n","import http from \"../http-common\";\n\nconst getAll = () => {\n  return http.get(\"/tutorials\");\n};\n\nconst get = id => {\n  return http.get(`/tutorials/${id}`);\n};\n\nconst create = data => {\n  return http.post(\"/tutorials\", data);\n};\n\nconst update = (id, data) => {\n  return http.put(`/tutorials/${id}`, data);\n};\n\nconst remove = id => {\n  return http.delete(`/tutorials/${id}`);\n};\n\nconst removeAll = () => {\n  return http.delete(`/tutorials`);\n};\n\nconst findByTitle = title => {\n  return http.get(`/tutorials?title=${title}`);\n};\n\nexport default {\n  getAll,\n  get,\n  create,\n  update,\n  remove,\n  removeAll,\n  findByTitle\n};\n","import React, { useState } from \"react\";\nimport TutorialDataService from \"../services/TutorialService\";\n\n\n\nconst AddTutorial = (props) => {\n  const initialTutorialState = {\n    id: null,\n    title: \"\",\n    description: \"\",\n    published: false\n  };\n  const [tutorial, setTutorial] = useState(initialTutorialState);//초기값 설정\n  const [submitted, setSubmitted] = useState(false);//초기값 설정\n\n\n   //폼 값이 적히면 event 발생하며 발생한 폼의 name과 value 값이\n  //setTutorial의 각각 키값과 데이터값으로 지정된다.\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    setTutorial({ ...tutorial, [name]: value });\n  };\n\n\n\n  //폼에 적힌 데이터를 saveTutorial의 state 데이터로 저장함.\n  const saveTutorial = () => {\n    var data = {\n      title: tutorial.title,\n      description: tutorial.description\n    };\n\n\n\n\n //서버로 create 생성을 위한 데이터 새롤 구성한 state의 setTutorial 데이터를 보냄\n    TutorialDataService.create(data)\n      .then(response => {\n        setTutorial({\n          id: response.data.id,\n          title: response.data.title,\n          description: response.data.description,\n          published: response.data.published\n        });\n        setSubmitted(true);\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n\n\n  //submit 후 다시 초기의 state로 초기화\n  const newTutorial = () => {\n    setTutorial(initialTutorialState);\n    setSubmitted(false);\n    props.history.push(\"/tutorials\")\n  };\n\n  return (\n    <div className=\"submit-form\">\n      {submitted ? (\n        <div>\n          <h4>You submitted successfully!</h4>\n          <button className=\"btn btn-success\" onClick={newTutorial}>\n            확인\n          </button>\n         \n        </div>\n      ) : (\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">Title</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"title\"\n              required\n              value={tutorial.title}\n              onChange={handleInputChange}\n              name=\"title\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"description\"\n              required\n              value={tutorial.description}\n              onChange={handleInputChange}\n              name=\"description\"\n            />\n          </div>\n\n          <button onClick={saveTutorial} className=\"btn btn-success\">\n            Submit\n          </button>\n          \n        </div>\n\n\n\n      )}\n    </div>\n  );\n};\n\nexport default AddTutorial;\n","import React, { useState, useEffect } from \"react\";\nimport TutorialDataService from \"../services/TutorialService\";\n\nconst Tutorial = props => {\n  const initialTutorialState = {\n    id: null,\n    title: \"\",\n    description: \"\",\n    published: false\n  };\n  const [currentTutorial, setCurrentTutorial] = useState(initialTutorialState);\n  const [message, setMessage] = useState(\"\");\n\n  const getTutorial = id => {\n    TutorialDataService.get(id)\n      .then(response => {\n        setCurrentTutorial(response.data);\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  useEffect(() => {\n    getTutorial(props.match.params.id);\n  }, [props.match.params.id]);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    setCurrentTutorial({ ...currentTutorial, [name]: value });\n  };\n\n  const updatePublished = status => {\n    var data = {\n      id: currentTutorial.id,\n      title: currentTutorial.title,\n      description: currentTutorial.description,\n      published: status\n    };\n\n    TutorialDataService.update(currentTutorial.id, data)\n      .then(response => {\n        setCurrentTutorial({ ...currentTutorial, published: status });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const updateTutorial = () => {\n    TutorialDataService.update(currentTutorial.id, currentTutorial)\n      .then(response => {\n        console.log(response.data);\n        setMessage(\"The tutorial was updated successfully!\");\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const deleteTutorial = () => {\n    TutorialDataService.remove(currentTutorial.id)\n      .then(response => {\n        console.log(response.data);\n        props.history.push(\"/tutorials\");\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div>\n      {currentTutorial ? (\n        <div className=\"edit-form\">\n          <h4>Tutorial</h4>\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Title</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                name=\"title\"\n                value={currentTutorial.title}\n                onChange={handleInputChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                name=\"description\"\n                value={currentTutorial.description}\n                onChange={handleInputChange}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>\n                <strong>Status:</strong>\n              </label>\n              {currentTutorial.published ? \"Published\" : \"Pending\"}\n            </div>\n          </form>\n\n          {currentTutorial.published ? (\n            <button\n              className=\"badge badge-primary mr-2\"\n              onClick={() => updatePublished(false)}\n            >\n              UnPublish\n            </button>\n          ) : (\n            <button\n              className=\"badge badge-primary mr-2\"\n              onClick={() => updatePublished(true)}\n            >\n              Publish\n            </button>\n          )}\n\n          <button className=\"badge badge-danger mr-2\" onClick={deleteTutorial}>\n            Delete\n          </button>\n\n          <button\n            type=\"submit\"\n            className=\"badge badge-success\"\n            onClick={updateTutorial}\n          >\n            Update\n          </button>\n          <p>{message}</p>\n        </div>\n      ) : (\n        <div>\n          <br />\n          <p>Please click on a Tutorial...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tutorial;\n","import React, { useState, useEffect } from \"react\";\nimport TutorialDataService from \"../services/TutorialService\";\nimport { Link } from \"react-router-dom\";\n\nconst TutorialsList = () => {\n  const [tutorials, setTutorials] = useState([]);\n  const [currentTutorial, setCurrentTutorial] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [searchTitle, setSearchTitle] = useState(\"\");\n\n  useEffect(() => {\n    retrieveTutorials();\n  }, []);\n\n  const onChangeSearchTitle = e => {\n    const searchTitle = e.target.value;\n    setSearchTitle(searchTitle);\n  };\n\n  const retrieveTutorials = () => {\n    TutorialDataService.getAll()\n      .then(response => {\n        setTutorials(response.data);\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const refreshList = () => {\n    retrieveTutorials();\n    setCurrentTutorial(null);\n    setCurrentIndex(-1);\n  };\n\n  const setActiveTutorial = (tutorial, index) => {\n    setCurrentTutorial(tutorial);\n    setCurrentIndex(index);\n  };\n\n  const removeAllTutorials = () => {\n    TutorialDataService.removeAll()\n      .then(response => {\n        console.log(response.data);\n        refreshList();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const findByTitle = () => {\n    TutorialDataService.findByTitle(searchTitle)\n      .then(response => {\n        setTutorials(response.data);\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div className=\"list row\">\n      <div className=\"col-md-8\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search by title\"\n            value={searchTitle}\n            onChange={onChangeSearchTitle}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              type=\"button\"\n              onClick={findByTitle}\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-6\">\n        <h4>Tutorials List</h4>\n\n        <ul className=\"list-group\">\n          {tutorials &&\n            tutorials.map((tutorial, index) => (\n              <li\n                className={\n                  \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\n                }\n                onClick={() => setActiveTutorial(tutorial, index)}\n                key={index}\n              >\n                {tutorial.title}\n              </li>\n            ))}\n        </ul>\n\n        <button\n          className=\"m-3 btn btn-sm btn-danger\"\n          onClick={removeAllTutorials}\n        >\n          Remove All\n        </button>\n      </div>\n      <div className=\"col-md-6\">\n        {currentTutorial ? (\n          <div>\n            <h4>Tutorial</h4>\n            <div>\n              <label>\n                <strong>Title:</strong>\n              </label>{\" \"}\n              {currentTutorial.title}\n            </div>\n            <div>\n              <label>\n                <strong>Description:</strong>\n              </label>{\" \"}\n              {currentTutorial.description}\n            </div>\n            <div>\n              <label>\n                <strong>Status:</strong>\n              </label>{\" \"}\n              {currentTutorial.published ? \"Published\" : \"Pending\"}\n            </div>\n\n            <Link\n              to={\"/tutorials/\" + currentTutorial.id}\n              className=\"badge badge-warning\"\n            >\n              Edit\n            </Link>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a Tutorial...</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TutorialsList;\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddTutorial from \"./components/AddTutorial\";\nimport Tutorial from \"./components/Tutorial\";\nimport TutorialsList from \"./components/TutorialsList\";\n\nfunction App() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a href=\"/tutorials\" className=\"navbar-brand\">\n          bezKoder\n        </a>\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/tutorials\"} className=\"nav-link\">\n              Tutorials\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to={\"/add\"} className=\"nav-link\">\n              Add\n            </Link>\n          </li>\n        </div>\n      </nav>\n\n      <div className=\"container mt-3\">\n        <Switch>\n          <Route exact path={[\"/\", \"/tutorials\"]} component={TutorialsList} />\n          <Route exact path=\"/add\" component={AddTutorial} />\n          <Route path=\"/tutorials/:id\" component={Tutorial} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}